{"ast":null,"code":"var _jsxFileName = \"/Users/eve/Desktop/Projects/SpaceX/Code/starlink/src/components/Main.js\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from 'antd';\nimport axios from \"axios\";\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport { SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY } from \"../constants\";\nimport WorldMap from './WorldMap';\n\n/*\njs中的import的格式是： import {模块中的方法} from '模块的路径'\n其中模块的路径可以是相对路径，也可以是绝对路径，但是一定要加上模块的后缀名，否则会报错。\n{} 里面的方法是模块中导出的方法，如果是默认导出的方法，那么就不需要加上{}，直接导入就可以了。\nimport React, {Component} from \"react\"; 从react模块中导入React和Component方法。\nReact是一个类，Component是一个方法。\nimport {Row, Col } from 'antd'; 从antd模块中导入Row和Col方法。\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      setting: {},\n      satInfo: {},\n      satList: [],\n      isLoadingList: false\n    };\n    this.showNearbySatellite = setting => {\n      console.log('show nearby');\n      this.setState({\n        setting: setting\n      });\n      this.fetchSatellite(setting);\n    };\n    this.fetchSatellite = setting => {\n      console.log(\"fetching\");\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude\n      } = setting;\n      const url = `${BASE_URL}/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/$&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        isLoadingList: true\n      });\n      axios.get(url).then(res => {\n        console.log(res.data);\n        this.setState({\n          satInfo: res.data,\n          isLoadingList: false\n        });\n      }).catch(error => {\n        this.setState({\n          isLoadingList: false\n        });\n        console.log('err in fetch satellite -> ', error);\n      });\n    };\n    this.showMap = data => {\n      console.log('show on the map -> ', data);\n    };\n  }\n  render() {\n    const {\n      satInfo\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Row, {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        className: \"left-side\",\n        children: [/*#__PURE__*/_jsxDEV(SatSetting, {\n          onShow: this.showNearbySatellite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SatelliteList, {\n          satInfo: satInfo,\n          isLoad: this.state.isLoadingList,\n          onShowMap: this.showMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        className: \"right-side\",\n        children: /*#__PURE__*/_jsxDEV(WorldMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Main;\n/*\nclass Main extends Component { ... } 定义了一个名为 Main 的类组件。\nextends Component 表示 Main 组件继承了 Component 类。\nrender() { ... } 定义了一个名为 render 的方法，这个方法返回一个 React 元素。\n<Row> ... </Row> 是一个 React 元素，它是一个 HTML 元素，它的类型是 Row。\nRow类型的元素有一个子元素，这个子元素是 main。\n\n<Col span={8} className='left-side'> ... </Col> 是一个 React 元素，\n它是一个 HTML 元素，它的类型是 Col，它有两个属性，分别是 span 和 className。\nspan 属性的值是 8，className 属性的值是 left-side。\n<Col span={8} className='left-side'> ... </Col> 的内容是 left。\n\nSatSetting 是一个 React 元素，它是一个自定义组件，它的类型是 SatSetting。\n\n */","map":{"version":3,"names":["React","Component","Row","Col","axios","SatSetting","SatelliteList","SAT_API_KEY","NEARBY_SATELLITE","STARLINK_CATEGORY","WorldMap","jsxDEV","_jsxDEV","Main","constructor","args","state","setting","satInfo","satList","isLoadingList","showNearbySatellite","console","log","setState","fetchSatellite","latitude","longitude","elevation","altitude","url","BASE_URL","get","then","res","data","catch","error","showMap","render","className","children","span","onShow","fileName","_jsxFileName","lineNumber","columnNumber","isLoad","onShowMap"],"sources":["/Users/eve/Desktop/Projects/SpaceX/Code/starlink/src/components/Main.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport { Row, Col } from 'antd';\nimport axios from \"axios\"; \n\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport { SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY} from \"../constants\"; \nimport WorldMap from './WorldMap';\n\n/*\njs中的import的格式是： import {模块中的方法} from '模块的路径'\n其中模块的路径可以是相对路径，也可以是绝对路径，但是一定要加上模块的后缀名，否则会报错。\n{} 里面的方法是模块中导出的方法，如果是默认导出的方法，那么就不需要加上{}，直接导入就可以了。\nimport React, {Component} from \"react\"; 从react模块中导入React和Component方法。\nReact是一个类，Component是一个方法。\nimport {Row, Col } from 'antd'; 从antd模块中导入Row和Col方法。\n */\n\nclass Main extends Component{\n\tstate = {\n\t\t\tsetting: {},\n\t\t\tsatInfo: {},\n\t\t\tsatList: [],\n\t\t\tisLoadingList: false\n\t}\n\n\tshowNearbySatellite = (setting) => {\n\t\t\tconsole.log('show nearby')\n\t\t\tthis.setState({\n\t\t\t\t\tsetting: setting\n\t\t\t})\n\t\t\tthis.fetchSatellite(setting);\n\t}\n\n\tfetchSatellite = (setting) => {\n\t\t\tconsole.log(\"fetching\")\n\t\t\tconst { latitude, longitude, elevation, altitude } = setting;\n\t\t\tconst url = `${BASE_URL}/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/$&apiKey=${SAT_API_KEY}`;\n\t\t\tthis.setState({\n\t\t\t\t\tisLoadingList: true\n\t\t\t});\n\t\t\t\n\t\t\taxios.get(url)\n\t\t\t\t\t.then( res => {\n\t\t\t\t\t\t\tconsole.log(res.data);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tsatInfo: res.data,\n\t\t\t\t\t\t\t\t\tisLoadingList: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t\t.catch( error => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tisLoadingList: false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconsole.log('err in fetch satellite -> ', error);\n\t\t\t\t\t})\n\n\t}\n\n\tshowMap = (data) => {\n\t\tconsole.log('show on the map -> ', data);\t\n\t}\n\n    render() {\n     \tconst { satInfo } = this.state;\n\t\t\t\n        return (\n            <Row className='main'>\n                <Col span={8} className='left-side'>\n                    <SatSetting onShow={this.showNearbySatellite} />\n                    <SatelliteList satInfo={satInfo}\n\t\t\t\t\t\t\t\t   isLoad={this.state.isLoadingList}\n\t\t\t\t\t\t\t\t   onShowMap={this.showMap}\n\t\t\t\t\t/>\n                </Col>\n                <Col span={16} className='right-side'>\n                    <WorldMap />\n                </Col>\n            </Row>\n        );\n    }\n}\nexport default Main;\n/*\nclass Main extends Component { ... } 定义了一个名为 Main 的类组件。\nextends Component 表示 Main 组件继承了 Component 类。\nrender() { ... } 定义了一个名为 render 的方法，这个方法返回一个 React 元素。\n<Row> ... </Row> 是一个 React 元素，它是一个 HTML 元素，它的类型是 Row。\nRow类型的元素有一个子元素，这个子元素是 main。\n\n<Col span={8} className='left-side'> ... </Col> 是一个 React 元素，\n它是一个 HTML 元素，它的类型是 Col，它有两个属性，分别是 span 和 className。\nspan 属性的值是 8，className 属性的值是 left-side。\n<Col span={8} className='left-side'> ... </Col> 的内容是 left。\n\nSatSetting 是一个 React 元素，它是一个自定义组件，它的类型是 SatSetting。\n\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}